name: Deploy to Production

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      reason:
        description: 'Raison du déploiement manuel'
        required: false
        default: 'Déploiement manuel'

jobs:
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          debug: true
          script: |
            echo "=== Démarrage du processus de déploiement ==="
            DEPLOY_START_TIME=$(date +%s)

            # Fonction pour vérifier les erreurs
            check_error() {
              if [ $? -ne 0 ]; then
                echo "❌ Erreur: $1"
                exit 1
              fi
            }

            # Fonction pour mesurer et journaliser le temps écoulé
            log_time() {
              CURRENT_TIME=$(date +%s)
              ELAPSED=$((CURRENT_TIME - DEPLOY_START_TIME))
              echo "⏱️ Temps écoulé: $ELAPSED secondes - $1"
            }

            # Vérifier et mettre à jour le répertoire
            echo "=== Vérification du répertoire ==="
            if [ ! -d "/home/benjamin/Notia" ]; then
              echo "Création du répertoire..."
              mkdir -p /home/benjamin/Notia
              cd /home/benjamin/Notia
              git clone https://github.com/CreniautB/notia.git .
              check_error "Échec du clonage du dépôt"
            else
              echo "Mise à jour du répertoire existant..."
              cd /home/benjamin/Notia
            fi
            log_time "Initialisation du répertoire"

            # Sauvegarde avant mise à jour
            echo "=== Création d'une sauvegarde ==="
            BACKUP_DIR="/home/benjamin/Notia_backups/$(date +%Y%m%d_%H%M%S)"
            mkdir -p $BACKUP_DIR
            if [ -f "docker-compose.yml" ]; then
              cp docker-compose.yml $BACKUP_DIR/
              check_error "Échec de la sauvegarde docker-compose.yml"
            fi
            
            # Sauvegarde des données MongoDB si possible
            echo "Tentative de sauvegarde MongoDB..."
            if docker-compose ps | grep -q "mongodb.*Up"; then
              # MongoDB est en cours d'exécution, tentative de sauvegarde
              if docker-compose exec -T mongodb mongodump --out=/tmp/mongodb_backup 2>/dev/null; then
                MONGODB_CONTAINER=$(docker-compose ps -q mongodb)
                if [ ! -z "$MONGODB_CONTAINER" ]; then
                  docker cp $MONGODB_CONTAINER:/tmp/mongodb_backup $BACKUP_DIR/
                  echo "✅ Sauvegarde MongoDB réussie dans $BACKUP_DIR/mongodb_backup"
                else
                  echo "⚠️ Avertissement: Conteneur MongoDB non trouvé, sauvegarde ignorée"
                fi
              else
                echo "⚠️ Avertissement: Échec de la sauvegarde MongoDB, poursuite du déploiement"
              fi
            else
              echo "⚠️ Avertissement: MongoDB n'est pas en cours d'exécution, sauvegarde ignorée"
            fi
            log_time "Sauvegarde"

            # Mise à jour du code
            echo "=== Mise à jour du code ==="
            git fetch origin
            git reset --hard origin/master
            git clean -fd
            check_error "Échec de la mise à jour du code"
            log_time "Mise à jour du code"

            # Vérification des fichiers de configuration
            echo "=== Vérification des fichiers de configuration ==="
            REQUIRED_FILES=("docker-compose.yml" "apps/backend/Dockerfile" "apps/frontend/Dockerfile" "nginx/notias.fr")
            for file in "${REQUIRED_FILES[@]}"; do
              if [ ! -f "$file" ]; then
                echo "❌ Erreur: Le fichier $file n'existe pas"
                exit 1
              fi
            done
            log_time "Vérification des fichiers"

            # Vérification des certificats SSL
            echo "=== Vérification des certificats SSL ==="
            if [ ! -f "/etc/nginx/ssl/notias.fr/certificat.cer" ] || [ ! -f "/etc/nginx/ssl/notias.fr/_.notias.fr_private_key.key" ]; then
              echo "❌ Erreur: Les certificats SSL sont manquants sur le serveur"
              exit 1
            fi

            # Création des répertoires et copie des certificats
            echo "=== Configuration des certificats SSL ==="
            mkdir -p nginx/ssl/notias.fr
            sudo -n cp /etc/nginx/ssl/notias.fr/certificat.cer nginx/ssl/notias.fr/
            sudo -n cp /etc/nginx/ssl/notias.fr/_.notias.fr_private_key.key nginx/ssl/notias.fr/
            sudo -n chown -R benjamin:benjamin nginx/ssl
            sudo -n chmod 600 nginx/ssl/notias.fr/*.key
            sudo -n chmod 644 nginx/ssl/notias.fr/*.cer
            log_time "Configuration SSL"

            # Arrêt et sauvegarde des données des conteneurs existants si nécessaire
            echo "=== Sauvegarde des données et arrêt des conteneurs ==="
            if docker-compose ps | grep -q Up; then
              echo "Sauvegarde des volumes si nécessaire..."
              # Ajoutez ici des commandes pour sauvegarder vos données si nécessaire
              
              echo "Arrêt des conteneurs existants..."
              docker-compose down --remove-orphans
              check_error "Erreur lors de l'arrêt des conteneurs"
            fi
            log_time "Arrêt des conteneurs"

            # Nettoyage des images non utilisées
            echo "=== Nettoyage des ressources Docker ==="
            docker system prune -f --volumes
            check_error "Échec du nettoyage des ressources Docker"

            # Vérification de la structure des répertoires
            echo "=== Vérification de la structure des répertoires ==="
            ls -la
            echo "=== Structure du répertoire apps ==="
            ls -la ./apps
            echo "=== Structure du répertoire apps/frontend ==="
            ls -la ./apps/frontend
            echo "=== Structure du répertoire apps/backend ==="
            ls -la ./apps/backend
            
            # Vérification des fichiers critiques
            echo "=== Vérification des fichiers package.json ==="
            cat ./apps/frontend/package.json
            echo "=== Vérification des fichiers backend package.json ==="
            cat ./apps/backend/package.json
            
            # Construction et démarrage des conteneurs
            echo "=== Construction et démarrage des conteneurs ==="
            
            # Vérifier le contenu des fichiers Dockerfile
            echo "=== Contenu du Dockerfile backend ==="
            cat ./apps/backend/Dockerfile
            
            # Vérifier le contenu du package.json du backend
            echo "=== Contenu du package.json backend ==="
            cat ./apps/backend/package.json
            
            # Construire le conteneur backend
            echo "Construction du backend..."
            # Utiliser --progress=plain pour afficher les logs détaillés du build
            docker-compose build --no-cache --progress=plain backend
            check_error "Échec de la construction du backend"
            
            # Construire le conteneur frontend
            echo "Construction du frontend..."
            docker-compose build --no-cache frontend
            check_error "Échec de la construction du frontend"
            
            # Construire les autres services
            echo "Construction des autres services..."
            docker-compose build --no-cache
            check_error "Échec de la construction des conteneurs"
            log_time "Construction des conteneurs"
            
            # Démarrer les conteneurs
            echo "Démarrage des conteneurs..."
            docker-compose up -d
            check_error "Échec du démarrage des conteneurs"
            log_time "Démarrage des conteneurs"

            # Attente pour que les services démarrent
            echo "Attente du démarrage des services..."
            sleep 15

            # Vérification des services sur leurs ports
            echo "=== Vérification des services sur leurs ports ==="
            if ! curl -s http://localhost:3000 >/dev/null; then
              echo "❌ Erreur: Le frontend ne répond pas sur le port 3000"
              docker-compose logs frontend
            else
              echo "✅ Frontend accessible sur le port 3000"
            fi

            if ! curl -s http://localhost:3001/api/health >/dev/null; then
              echo "❌ Erreur: Le backend ne répond pas sur le port 3001"
              docker-compose logs backend
            else
              echo "✅ Backend accessible sur le port 3001"
            fi

            # Configuration de Nginx - APRÈS le démarrage des conteneurs
            echo "=== Configuration de Nginx ==="
            # Créer les répertoires nécessaires
            sudo -n mkdir -p /etc/nginx/sites-available
            sudo -n mkdir -p /etc/nginx/sites-enabled
            
            # Copier la configuration
            sudo -n cp nginx/notias.fr /etc/nginx/sites-available/notias.fr
            
            # Supprimer l'ancien lien symbolique s'il existe
            if [ -L "/etc/nginx/sites-enabled/notias.fr" ]; then
              sudo -n rm /etc/nginx/sites-enabled/notias.fr
            fi
            
            # Créer le nouveau lien symbolique
            sudo -n ln -s /etc/nginx/sites-available/notias.fr /etc/nginx/sites-enabled/
            
            # Tester la configuration
            sudo -n nginx -t
            check_error "Configuration Nginx invalide"
            
            # Redémarrer Nginx
            sudo -n systemctl restart nginx
            check_error "Échec du redémarrage de Nginx"
            log_time "Configuration Nginx"

            # Vérification des conteneurs
            echo "=== Vérification des conteneurs ==="
            if ! docker-compose ps | grep -q Up; then
              echo "❌ Erreur: Les conteneurs ne sont pas en cours d'exécution"
              echo "Logs des conteneurs:"
              docker-compose logs
              
              echo "Restauration du déploiement précédent..."
              # Restaurer la version précédente (si vous avez une sauvegarde)
              if [ -f "$BACKUP_DIR/docker-compose.yml" ]; then
                cp "$BACKUP_DIR/docker-compose.yml" .
                docker-compose up -d
              fi
              
              exit 1
            fi

            # Vérification des ports
            echo "=== Vérification des ports ==="
            if ! netstat -tulpn | grep -q ':80'; then
              echo "❌ Erreur: Le port 80 n'est pas en écoute"
              exit 1
            fi
            
            if ! netstat -tulpn | grep -q ':443'; then
              echo "❌ Erreur: Le port 443 n'est pas en écoute"
              exit 1
            fi

            # Test de l'accès au site
            echo "=== Test de l'accès au site ==="
            if ! curl -s -o /dev/null -w "%{http_code}" https://notias.fr | grep -q "200\|301\|302"; then
              echo "❌ Erreur: Le site ne répond pas correctement"
              exit 1
            fi

            DEPLOY_END_TIME=$(date +%s)
            TOTAL_TIME=$((DEPLOY_END_TIME - DEPLOY_START_TIME))
            echo "=== Déploiement terminé avec succès en $TOTAL_TIME secondes ==="

      - name: Notification de déploiement
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: Déploiement de Notia
          SLACK_MESSAGE: 'Statut: ${{ job.status }}'
          SLACK_FOOTER: 'GitHub Actions'
