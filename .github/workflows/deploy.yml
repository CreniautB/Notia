name: Deploy to Production

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          debug: true
          script: |
            echo "=== Starting deployment process ==="

            # Vérifier le répertoire
            if [ ! -d "/home/notia/Notia" ]; then
              echo "Directory does not exist, creating..."
              mkdir -p /home/notia/Notia
              cd /home/notia/Notia
              git clone https://github.com/CreniautB/notia.git .
            else
              echo "Directory exists, proceeding with update..."
              cd /home/notia/Notia
            fi

            # Afficher la branche actuelle et le dernier commit
            echo "=== Current branch and commit ==="
            git branch
            git log -1

            # Pull des changements
            echo "=== Pulling latest changes ==="
            git pull origin master || { echo "Git pull failed"; exit 1; }

            # Installer les dépendances
            echo "=== Installing dependencies ==="
            npm install || { echo "npm install failed"; exit 1; }

            # Créer le fichier .env pour le backend
            echo "=== Création du fichier .env pour le backend ==="
            cat > apps/backend/.env << 'EOL'
            # Configuration de la base de données
            MONGODB_URI=${{ secrets.MONGODB_URI }}

            # Options avancées pour MongoDB
            MONGODB_RETRY_ATTEMPTS=3
            MONGODB_RETRY_DELAY=1000
            MONGODB_CONNECTION_TIMEOUT=10000

            # Port de l'application
            PORT=3001

            # Autres variables d'environnement
            NODE_ENV=production
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            EOL

            # Créer le fichier .env pour le frontend
            echo "=== Création du fichier .env pour le frontend ==="
            cat > apps/frontend/.env.local << 'EOL'
            # URL de l'API backend
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
            EOL

            # Vérifier la connexion à MongoDB avant de continuer
            echo "=== Vérification de la connexion à MongoDB ==="
            # Installer mongodb-clients si nécessaire
            which mongosh > /dev/null || sudo apt-get update && sudo apt-get install -y mongodb-clients

            # Extraire l'URI de MongoDB du fichier .env
            MONGO_URI=$(grep MONGODB_URI apps/backend/.env | cut -d '=' -f2)

            # Tester la connexion à MongoDB
            echo "Tentative de connexion à MongoDB..."
            if mongosh "$MONGO_URI" --eval "db.adminCommand('ping')" > /dev/null; then
              echo "✅ Connexion à MongoDB réussie !"
            else
              echo "❌ Erreur: Impossible de se connecter à MongoDB"
              echo "Vérifiez l'URI de connexion et assurez-vous que MongoDB est accessible."
              exit 1
            fi

            # Build
            echo "=== Building projects ==="
            npx nx run-many --target=build --projects=frontend,backend || { echo "Build failed"; exit 1; }

            # Vérifier les processus PM2
            echo "=== Current PM2 processes ==="
            pm2 list

            # Redémarrer les services
            echo "=== Restarting services ==="
            pm2 restart notia-frontend notia-backend || { echo "PM2 restart failed"; exit 1; }
            pm2 save

            echo "=== Deployment complete ==="
