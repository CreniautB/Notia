name: Deploy to Production

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          debug: true
          script: |
            echo "=== Démarrage du processus de déploiement ==="

            # Fonction pour vérifier les erreurs
            check_error() {
              if [ $? -ne 0 ]; then
                echo "❌ Erreur: $1"
                exit 1
              fi
            }

            # Vérifier et mettre à jour le répertoire
            echo "=== Vérification du répertoire ==="
            if [ ! -d "/home/benjamin/Notia" ]; then
              echo "Création du répertoire..."
              mkdir -p /home/benjamin/Notia
              cd /home/benjamin/Notia
              git clone https://github.com/CreniautB/notia.git .
              check_error "Échec du clonage du dépôt"
            else
              echo "Mise à jour du répertoire existant..."
              cd /home/benjamin/Notia
            fi

            # Mise à jour du code
            echo "=== Mise à jour du code ==="
            git fetch origin
            git reset --hard origin/master
            git clean -fd
            check_error "Échec de la mise à jour du code"

            # Vérification des fichiers de configuration
            echo "=== Vérification des fichiers de configuration ==="
            for file in "docker-compose.yml" "apps/backend/Dockerfile" "apps/frontend/Dockerfile" "nginx/notias.fr"; do
              if [ ! -f "$file" ]; then
                echo "❌ Erreur: Le fichier $file n'existe pas"
                exit 1
              fi
            done

            # Vérification des certificats SSL
            echo "=== Vérification des certificats SSL ==="
            if [ ! -f "nginx/ssl/notias.fr/certificat.cer" ] || [ ! -f "nginx/ssl/notias.fr/_.notias.fr_private_key.key" ]; then
              echo "❌ Erreur: Les certificats SSL sont manquants dans le projet"
              exit 1
            fi

            # Configuration de Nginx
            echo "=== Configuration de Nginx ==="
            # Créer les répertoires nécessaires
            sudo mkdir -p /etc/nginx/sites-available
            sudo mkdir -p /etc/nginx/sites-enabled
            
            # Copier la configuration
            sudo cp nginx/notias.fr /etc/nginx/sites-available/notias.fr
            
            # Supprimer l'ancien lien symbolique s'il existe
            if [ -L "/etc/nginx/sites-enabled/notias.fr" ]; then
              sudo rm /etc/nginx/sites-enabled/notias.fr
            fi
            
            # Créer le nouveau lien symbolique
            sudo ln -s /etc/nginx/sites-available/notias.fr /etc/nginx/sites-enabled/
            
            # Tester la configuration
            sudo nginx -t
            check_error "Configuration Nginx invalide"
            
            # Redémarrer Nginx
            sudo systemctl restart nginx
            check_error "Échec du redémarrage de Nginx"

            # Arrêt et suppression des conteneurs existants
            echo "=== Nettoyage des conteneurs existants ==="
            docker-compose down --remove-orphans
            docker system prune -f

            # Construction et démarrage des conteneurs
            echo "=== Construction et démarrage des conteneurs ==="
            docker-compose build --no-cache
            check_error "Échec de la construction des conteneurs"
            
            docker-compose up -d
            check_error "Échec du démarrage des conteneurs"

            # Attente pour que les services démarrent
            echo "Attente du démarrage des services..."
            sleep 10

            # Vérification des conteneurs
            echo "=== Vérification des conteneurs ==="
            docker-compose ps
            docker-compose logs --tail=20

            # Vérification des ports
            echo "=== Vérification des ports ==="
            netstat -tulpn | grep -E ':80|:443'
            check_error "Les ports 80 et 443 ne sont pas en écoute"

            echo "=== Déploiement terminé avec succès ==="
